{"data":{"projects":[{"artistName":"luxpris","description":"A study in reduction based around several repeating elements. A unique hash string seeded within each token informs the composition of the work. Variables include the color of the background, the amount of times each of the elements are duplicated, the set distance between each duplicate, and the coordinates of each element. Each token is unique.","maxInvocations":"200","name":"Elevated Deconstructions","projectId":"7","script":"let hashPairs = [];\n\nfor (let j = 0; j < 32; j++) {\n     hashPairs.push(tokenData.hash.slice(2 + (j * 2), 4 + (j * 2)));\n}\n\n\nlet seed = parseInt(tokenData.hash.slice(48, 64), 16);\n\nlet decPairs = hashPairs.map(x => {\n     return parseInt(x, 16);\n});\n\nlet multiplier;\n\nfunction setup() {\n     const dim = Math.min(windowWidth, windowHeight);\n     createCanvas(dim, dim);\n     multiplier = width / 2400;\n\n\n\n     noLoop()\n}\n\nfunction draw() {\n     noFill()\n     let a = 400 * multiplier;\n     let b = 1800 * multiplier;\n     let m = map(decPairs[0], 0, 255, 10 * multiplier, 30 * multiplier);\n     let x1 = map(decPairs[1], 0, 255, a, b);\n     let y1 = map(decPairs[2], 0, 255, a, b);\n     let x2 = map(decPairs[3], 0, 255, a, b)\n     let y2 = map(decPairs[4], 0, 255, a, b)\n     let x3 = map(decPairs[5], 0, 255, a, b)\n     let y3 = map(decPairs[6], 0, 255, a, b)\n     let x4 = map(decPairs[7], 0, 255, a, b)\n     let y4 = map(decPairs[8], 0, 255, a, b)\n     let x5 = map(decPairs[9], 0, 255, a, b)\n     let y5 = map(decPairs[10], 0, 255, a, b)\n     let x6 = map(decPairs[11], 0, 255, a, b)\n     let y6 = map(decPairs[12], 0, 255, a, b)\n     let x7 = map(decPairs[13], 0, 255, a, b)\n     let y7 = map(decPairs[14], 0, 255, a, b)\n     let x8 = map(decPairs[15], 0, 255, a, b)\n     let y8 = map(decPairs[16], 0, 255, a, b)\n     stroke(\"#111111\")\n     colorMode(HSB, 255)\n     let colorH = map(decPairs[18], 0, 255, 0, 255)\n     let colorS = map(decPairs[19], 0, 255, 0, 150)\n     let colorB = map(decPairs[20], 0, 255, 210, 255)\n     background(colorH, colorS, colorB)\n     for (let i = 0; i <= map(decPairs[17], 0, 255, 5, 15); i++) {\n          strokeWeight(5 * multiplier)\n          line(x1 + i * m, y1 + i * m, x2 + i * m, y2 + i * m)\n          line(x3 + i * m, y3 + i * m, x4 + i * m, y4 + i * m)\n          line(x5 + i * m, y5 + i * m, x6 + i * m, y6 + i * m)\n          line(x7 + i * m, y7 + i * m, x8 + i * m, y8 + i * m)\n     }\n\n     for (let i = 0; i < map(decPairs[18], 0, 255, 10, 30); i++) {\n          strokeWeight(map(decPairs[19], 0, 255, 1, 10) * multiplier)\n          circle(x1, y1, map(rnd(), 0, 1, 10 * multiplier, 200 * multiplier));\n     }\n     strokeWeight(10 * multiplier)\n     drawingContext.shadowOffsetX = 0;\n     drawingContext.shadowOffsetY = 0;\n     drawingContext.shadowBlur = 40 * multiplier;\n     drawingContext.shadowColor = \"#111111\";\n     circle(1200 * multiplier, 1200 * multiplier, 2000 * multiplier)\n     drawingContext.shadowOffsetX = 0;\n     drawingContext.shadowOffsetY = 0;\n     drawingContext.shadowBlur = 0;\n     strokeWeight(0.08 * multiplier)\n     stroke(\"pink\")\n     for (let i = 0; i < 7500 * multiplier; i++) {\n          line(map(rnd(), 0, 1, -1200 * multiplier, 3600 * multiplier), map(rnd(), 0, 1, -1200 * multiplier, 3600 * multiplier), map(rnd(), 0, 1, -1200 * multiplier, 3600 * multiplier), map(rnd(), 0, 1, -1200 * multiplier, 3600 * multiplier))\n     }\n}\n\n\n\nfunction rnd() {\n\n\n     seed ^= seed << 13;\n\n     seed ^= seed >> 17;\n\n     seed ^= seed << 5;\n\n     return (((seed < 0) ? ~seed + 1 : seed) % 1000000) / 1000000;\n}","scriptJson":"{\"type\":\"p5js\",\"version\":\"1.0.0\",\"aspectRatio\":\"1\",\"curation_status\":\"curated\"}"}]}}